// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetQueryLanguageStatusParams creates a new GetQueryLanguageStatusParams object
// no default values defined in spec.
func NewGetQueryLanguageStatusParams() GetQueryLanguageStatusParams {

	return GetQueryLanguageStatusParams{}
}

// GetQueryLanguageStatusParams contains all the bound params for the get query language status operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetQueryLanguageStatus
type GetQueryLanguageStatusParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*all(全部)
	  Required: true
	  In: path
	*/
	Language string
	/*
	  In: query
	  Collection Format: multi
	*/
	Languages []string
	/*
	  Required: true
	  In: path
	*/
	Status string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetQueryLanguageStatusParams() beforehand.
func (o *GetQueryLanguageStatusParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rLanguage, rhkLanguage, _ := route.Params.GetOK("language")
	if err := o.bindLanguage(rLanguage, rhkLanguage, route.Formats); err != nil {
		res = append(res, err)
	}

	qLanguages, qhkLanguages, _ := qs.GetOK("languages")
	if err := o.bindLanguages(qLanguages, qhkLanguages, route.Formats); err != nil {
		res = append(res, err)
	}

	rStatus, rhkStatus, _ := route.Params.GetOK("status")
	if err := o.bindStatus(rStatus, rhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLanguage binds and validates parameter Language from path.
func (o *GetQueryLanguageStatusParams) bindLanguage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Language = raw

	return nil
}

// bindLanguages binds and validates array parameter Languages from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *GetQueryLanguageStatusParams) bindLanguages(rawData []string, hasKey bool, formats strfmt.Registry) error {

	// CollectionFormat: multi
	languagesIC := rawData

	if len(languagesIC) == 0 {
		return nil
	}

	var languagesIR []string
	for _, languagesIV := range languagesIC {
		languagesI := languagesIV

		languagesIR = append(languagesIR, languagesI)
	}

	o.Languages = languagesIR

	return nil
}

// bindStatus binds and validates parameter Status from path.
func (o *GetQueryLanguageStatusParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Status = raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetQueryLanguageStatusParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Enum("status", "path", o.Status, []interface{}{"all", "unset", "settled"}); err != nil {
		return err
	}

	return nil
}
